# -*- coding: utf-8 -*-
"""Task_1_Iris_Flower_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VGPBl2ML83bhFp0iPwZaLckXutA5EUUa
"""

#Import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#Read and load data:
df = pd.read_csv('/content/drive/MyDrive/CodeAlpha_Internship/Iris.csv')
df.head()

#Check missing values
df.isnull().sum()

#Summary statistics
df.describe()

#Delete Column ID
df=df.drop(columns="Id")

#Select only numerical columns
numerical_columns = df.select_dtypes(include=['number'])
correlation_matrix = numerical_columns.corr()
correlation_matrix

#Visulization using correlation matrix
plt.figure(figsize=(10,5))
sns.heatmap(correlation_matrix,annot=True , cmap='RdYlGn')
plt.title("Correlation of Iris dataset")
plt.show()

#Check duplicates values
df.duplicated().sum()

#Delete duplicates
df.drop_duplicates(inplace=True)

#Detect outliers
plt.figure(figsize=(8, 6))
sns.boxplot(data=df)
plt.title("Data with Outliers")
plt.show()

"""By observing the above boxplots there is no any outliers."""

sns.kdeplot(df[['SepalWidthCm', 'SepalLengthCm']] , fill=True)
plt.show()

sns.kdeplot(df[['PetalWidthCm', 'PetalLengthCm']], fill=True)
plt.show()

# Import libraries for classification task
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression

#Remove warnings
import warnings
warnings.filterwarnings('ignore')

#Model building
X = df.drop(['Species'], axis=1)
y = df['Species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lg = LogisticRegression() #Create model
clf = lg.fit(X_train, y_train) #Fit the model
y_pred = clf.predict(X_test) # Predict the model
print("Accuracy Score : ", accuracy_score(y_test, y_pred))

print(classification_report(y_test, y_pred))

